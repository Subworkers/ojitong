# common
PYTHON_VERSION=py311
RELEASE_VERSION=v0.1.0
AWS_ECR_REPO_ENDPOINT_URL=public.ecr.aws/v5d5z1j6/subworkers/ojitong

# dev image
ADDITIONAL_COMPONENTS=jupyter
DEV_SERVICE=dev
DEV_CONTAINER_NAME=$(DEV_SERVICE)-$(PYTHON_VERSION)-$(ADDITIONAL_COMPONENTS)

IMAGE_NAME=$(AWS_ECR_REPO_ENDPOINT_URL)/$(DEV_SERVICE)
IMAGE_TAG=$(RELEASE_VERSION)-$(PYTHON_VERSION)-$(ADDITIONAL_COMPONENTS)

DOCKERFILE_PATH=$(PWD)/$(PYTHON_VERSION)-$(ADDITIONAL_COMPONENTS).Dockerfile
DOCKERCOMPOSE_FILE_PATH=$(PWD)/docker-compose-$(DEV_SERVICE).yaml

JUPYTER_NB_PORT=10000

ENV_PREFIX=IMAGE_NAME=$(IMAGE_NAME) IMAGE_TAG=$(IMAGE_TAG) DOCKERFILE_PATH=$(DOCKERFILE_PATH) JUPYTER_NB_PORT=$(JUPYTER_NB_PORT)

# base runner image
RUNNER_RELEASE_VERSION=v0.1.0
RUNNER_SERVICE=runner
RUNNER_BASE_SERVICE=base
RUNNER_BASE_CONTAINER_NAME=$(RUNNER_SERVICE)-$(RUNNER_BASE_SERVICE)

RUNNER_BASE_IMAGE_NAME=$(AWS_ECR_REPO_ENDPOINT_URL)/$(RUNNER_SERVICE)/$(RUNNER_BASE_SERVICE)
RUNNER_BASE_IMAGE_TAG=$(RELEASE_VERSION)-$(PYTHON_VERSION)

RUNNER_BASE_DOCKERFILE_PATH=$(PWD)/$(PYTHON_VERSION)-$(RUNNER_BASE_CONTAINER_NAME).Dockerfile
RUNNER_BASE_DOCKERCOMPOSE_FILE_PATH=$(PWD)/docker-compose-$(RUNNER_SERVICE).yaml

# common runner config
RUNNER_DOCKER_GROUP_NAME=docker
RUNNER_DOCKER_GROUP_ID=234
RUNNER_ENV_PREFIX=DOCKER_BUILDKIT=1 BASE_IMAGE_NAME=$(RUNNER_BASE_IMAGE_NAME) BASE_IMAGE_TAG=$(RUNNER_BASE_IMAGE_TAG) TEST_IMAGE_NAME=$(RUNNER_TEST_IMAGE_NAME) TEST_IMAGE_TAG=$(RUNNER_TEST_IMAGE_TAG) DOCKER_GROUP_NAME=$(RUNNER_DOCKER_GROUP_NAME) DOCKER_GROUP_ID=$(RUNNER_DOCKER_GROUP_ID)

# make auth.aws
auth.aws:
	rm ~/.aws/credentials
	ln -s $(PWD)/secrets/aws-credentials ~/.aws/credentials
	aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

# make build.dev
build.dev:
	$(ENV_PREFIX) docker-compose -f $(DOCKERCOMPOSE_FILE_PATH) build $(DEV_CONTAINER_NAME)

# make build.runner
build.runner:
	$(RUNNER_ENV_PREFIX) docker-compose -f $(RUNNER_BASE_DOCKERCOMPOSE_FILE_PATH) build $(RUNNER_BASE_CONTAINER_NAME)

# make build.dev
pull.dev:
	docker pull $(IMAGE_NAME):$(IMAGE_TAG)

# make build.dev
push.dev:
	docker tag $(IMAGE_NAME):$(IMAGE_TAG) $(IMAGE_NAME):$(IMAGE_TAG)
	docker push $(IMAGE_NAME):$(IMAGE_TAG)
	
	docker tag $(IMAGE_NAME):$(IMAGE_TAG) $(IMAGE_NAME):latest
	docker push $(IMAGE_NAME):latest

# make pull.runner
pull.runner:
	docker pull $(RUNNER_BASE_IMAGE_NAME):$(RUNNER_BASE_IMAGE_TAG)

# make push.runner.base
push.runner.base:
	docker tag $(RUNNER_BASE_IMAGE_NAME):$(RUNNER_BASE_IMAGE_TAG) $(RUNNER_BASE_IMAGE_NAME):$(RUNNER_BASE_IMAGE_TAG)
	docker push $(RUNNER_BASE_IMAGE_NAME):$(RUNNER_BASE_IMAGE_TAG)
	
	docker tag $(RUNNER_BASE_IMAGE_NAME):$(RUNNER_BASE_IMAGE_TAG) $(RUNNER_BASE_IMAGE_NAME):latest
	docker push $(RUNNER_BASE_IMAGE_NAME):latest

# make start
start:
	$(ENV_PREFIX) docker-compose -f $(DOCKERCOMPOSE_FILE_PATH) up $(DEV_CONTAINER_NAME) -d
	$(RUNNER_ENV_PREFIX) docker-compose -f $(RUNNER_BASE_DOCKERCOMPOSE_FILE_PATH) up $(RUNNER_BASE_CONTAINER_NAME) -d
	
# make down
down:
	$(ENV_PREFIX) docker-compose -f $(DOCKERCOMPOSE_FILE_PATH) down --remove-orphans
	$(RUNNER_ENV_PREFIX) docker-compose -f $(RUNNER_BASE_DOCKERCOMPOSE_FILE_PATH) down 
